# ===================================================================
# NOME DA APLICAÇÃO E URLS DOS MICROSSERVIÇOS
# ===================================================================
spring.application.name=bicicletario

microservico.externo.url=${MICROSERVICO_EXTERNO}
microservico.equipamento.url=${MICROSERVICO_EQUIPAMENTO}

# ===================================================================
# CONFIGURAÇÃO DA FONTE DE DADOS (DATASOURCE) - PostgreSQL
# ===================================================================
# URL de conexão JDBC para o seu banco de dados PostgreSQL.
# Substitua os valores <...> pelos dados do seu provedor de nuvem (ex: Railway).
spring.datasource.url=${DATABASE_URL}

# Credenciais de acesso ao banco de dados.
spring.datasource.username=${DATABASE_USER}
spring.datasource.password=${DATABASE_PASSWORD}

# ===================================================================
# CONFIGURAÇÃO DO JPA E HIBERNATE PARA POSTGRESQL
# ===================================================================
# Define o dialeto SQL específico do PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Define a estratégia de geração do schema do banco (DDL - Data Definition Language).
#
# Opções para um banco persistente como o PostgreSQL:
#   -> update:   (RECOMENDADO PARA DESENVOLVIMENTO) Tenta atualizar o schema para refletir
#               suas entidades, adicionando tabelas/colunas, sem apagar dados existentes.
#   -> validate: Apenas valida se o schema do banco corresponde às suas entidades.
#   -> none:     (RECOMENDADO PARA PRODUÇÃO) Não faz nada. O schema deve ser gerenciado
#               por ferramentas de migração como Flyway ou Liquibase.
#
spring.jpa.hibernate.ddl-auto=update

# (Opcional) Mostra no console o SQL gerado pelo Hibernate. Muito útil para debug.
spring.jpa.show-sql=true

# (Opcional) Formata o SQL mostrado no console para facilitar a leitura.
spring.jpa.properties.hibernate.format_sql=true