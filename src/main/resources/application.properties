# ===================================================================
# NOME DA APLICAÇÃO
# ===================================================================
# Define o nome da sua aplicação no Spring.
spring.application.name=bicicletario


# ===================================================================
# CONFIGURAÇÃO DO CONSOLE WEB DO H2 (para desenvolvimento)
# ===================================================================
# Habilita o console do H2, que permite visualizar e gerenciar o banco via navegador.
spring.h2.console.enabled=true
# Define o caminho para acessar o console. Acesse em: http://localhost:8080/h2-console
spring.h2.console.path=/h2-console


# ===================================================================
# CONFIGURAÇÃO DA FONTE DE DADOS (DATASOURCE) - H2 In-Memory
# ===================================================================
# URL de conexão para o H2 em memória.
# O banco de dados se chamará 'testdb'.
# DB_CLOSE_DELAY=-1 é CRUCIAL: impede que o banco seja apagado enquanto a aplicação estiver rodando.
# Sem isso, o banco poderia ser destruído assim que a última conexão fosse fechada.
spring.datasource.url=jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1

# Embora o Spring Boot geralmente detecte o driver pela URL, é uma boa prática especificá-lo.
spring.datasource.driverClassName=org.h2.Driver

# Credenciais de acesso ao banco.
spring.datasource.username=sa
spring.datasource.password=


# ===================================================================
# CONFIGURAÇÃO DO JPA E HIBERNATE
# ===================================================================
# Define o dialeto SQL específico do H2. O Spring Boot também costuma detectar isso automaticamente.
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

# Define a estratégia de geração do schema do banco (DDL - Data Definition Language).
# Esta é uma das configurações mais importantes para desenvolvimento.
#
# Opções comuns:
#   -> create-drop: (RECOMENDADO PARA H2 EM MEMÓRIA) Cria o schema ao iniciar a aplicação e o destrói ao finalizar.
#                  Garante um banco limpo a cada reinicialização, ideal para testes e desenvolvimento.
#   -> update:      Tenta atualizar o schema existente. Adiciona novas tabelas/colunas, mas não remove as antigas.
#                  Pode levar a inconsistências se você renomear ou remover campos nas suas entidades.
#   -> validate:    Apenas valida se o schema do banco corresponde às suas entidades. Não faz alterações.
#   -> none:        Não faz nada. Útil para ambientes de produção, onde o schema é gerenciado externamente (ex: Flyway, Liquibase).
#
spring.jpa.hibernate.ddl-auto=create-drop

# (Opcional) Mostra no console o SQL gerado pelo Hibernate. Muito útil para debug.
spring.jpa.show-sql=true

# (Opcional) Formata o SQL mostrado no console para facilitar a leitura.
spring.jpa.properties.hibernate.format_sql=true